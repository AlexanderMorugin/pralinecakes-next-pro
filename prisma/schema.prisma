// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// модель пользователя
model User {
  id               Int               @id @default(autoincrement())
  fullName         String
  email            String            @unique
  password         String
  role             UserRole          @default(USER)
  cart             Cart?
  orders           Order[]
  verificationCode VerificationCode?
  provider         String?
  providerId       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// модель категории
model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

// модель товара
model Product {
  id           Int           @id @default(autoincrement())
  name         String
  imageUrl     String
  category     Category      @relation(fields: [categoryId], references: [id])
  categoryId   Int
  ingredients  Ingredient[]
  productItems ProductItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// модель ингредиента входящего в товар
model Ingredient {
  id        Int        @id @default(autoincrement())
  name      String
  price     Int
  imageUrl  String
  products  Product[]
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// модель вариации товара
model ProductItem {
  id           Int        @id @default(autoincrement())
  productPrice Int
  productSize  Int?
  productType  Int?
  product      Product    @relation(fields: [productId], references: [id])
  productId    Int
  cartItems    CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// модель корзины пользователя
model Cart {
  id          Int        @id @default(autoincrement())
  user        User?      @relation(fields: [userId], references: [id])
  userId      Int        @unique
  totalAmount Int        @default(0)
  token       String
  cartItem    CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// модель товара находящегося в корзине
model CartItem {
  id            Int          @id @default(autoincrement())
  productItem   ProductItem  @relation(fields: [productItemId], references: [id])
  productItemId Int
  cart          Cart         @relation(fields: [cartId], references: [id])
  cartId        Int
  quantity      Int
  ingredients   Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// модель заказа в базе данных
model Order {
  id          Int         @id @default(autoincrement())
  user        User?       @relation(fields: [userId], references: [id])
  userId      Int?
  token       String
  totalAmount Int
  status      OrderStatus
  paymentId   String?
  items       Json

  // кому предназначается заказ
  fuulName String
  address  String
  email    String
  phone    String
  comments String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// модель варификации пользователя
model VerificationCode {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
  code   String

  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  SUCCES
  CANCEL
}

enum UserRole {
  USER
  ADMIN
}
